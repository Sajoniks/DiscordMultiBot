import glob
import os
import shutil

print(">>--- Running EmbedLayout generator")

namespace = None
while True:
    tmp = glob.glob("*.csproj", recursive=False)
    if len(tmp) != 0:
        namespace = str(tmp[0])[:-7]
        break

if namespace is None:
    print("Failed to resolve current project")
    exit(1)

print("Project: " + namespace)

base_path = os.getcwd()
script_path = os.path.join(base_path, "Codegen")
template_path = os.path.join(script_path, "Template")
embeds_path = os.path.join(base_path, "EmbedLayouts")
path = os.path.join(embeds_path, "EmbedLayouts.cs")

view_names = []

for view in glob.glob(os.path.join(embeds_path, "*View.xml")):
    view_name = view[len(embeds_path) + 1:]
    view_names.append(view_name)
    print(view_name + " <- \"" + view + "\"")

print("Discovered " + str(len(view_names)) + " views")

try:
    os.remove(path)
except:
    pass

try:
    shutil.copy2(template_path, path)
    print(">-- Generating " + path)
except:
    print("Template file was not found.")
    exit(1)

out_lines = []
for view in view_names:
    out_lines.append("\tpublic const string " + view[:-8] + " = " + "@\"" + namespace + ".EmbedLayouts." + view + "\";\n")
    out_lines.append("\t/// </summary>\n")
    out_lines.append("\t/// See the source code of <a href=\"file:///" + os.path.join(embeds_path, view) + "\">" + view + "</a>\n")
    out_lines.append("\t/// <summary>\n")

with open(path, encoding="utf-8") as f:
    in_lines = f.readlines()


for line in out_lines:
    in_lines.insert(7, line)

in_lines.insert(1, "// Autogenerated file. Do not edit!\n")
in_lines.insert(1, "//\n")

with open(path, "w", encoding="utf-8") as f:
    f.writelines(in_lines)

exit(0)
